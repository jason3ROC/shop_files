# *************************
# ******* Intro ***********
# *************************

# cust_mail_true v0.0.0
# written by Jason Miller
# logs into Lightspeed API
# searches through customer list and sets mailing to true
# for MailChimp integration

# *************************
# ******* Import ***********
# *************************
import numpy as mp
import pandas as pd
import datetime
import csv
import glob
import os

# *************************
# ******* Log file initialize ***********
# *************************

# ********---->> set current folder <<--------*******
folder_name = r'C:\Users\jaymi\OneDrive\Documents\3ROC\logs'
os.chdir(folder_name)

# ********---->> set log <<--------*******
now = datetime.datetime.now()
beta = True #  True is testing, False is production and will label unique log file
if beta:
    logname = 'log.txt'
else:
    logname = 'log-' + now.strftime('%Y%m%d%H%M') + '.txt'
log = open(logname, mode='w')

# *************************
# ******* define functions ***********
# *************************
def log_msg (s):
    sm = now.strftime('%Y%m%d%H%M%S') + ': ' + s
    print(sm)
    log.write(sm + '\n')

log_msg('program started')


# *************************
# ******* connect to Lightspeed API ***********
# *************************

# use the site below as key reference for API communication
#https://developers.lightspeedhq.com/retail/endpoints/Item/

log_msg('connecting to Lightspeed...')

# custom modification of https://pypi.org/project/lightspeed-api/
# added some mods since multi tagging can only be done in HTML not JSON uploads
import lightspeed_requests
import lightspeed_api_jrm

# get from OS file
c = {'account_id': '###',
     'client_id': '###',
     'client_secret': '###',
     'refresh_token': '###'
     }

# create new instance of Lightspeed for item tagging
ls = lightspeed_requests.Lightspeed(c)

# create new instance of Lightspeed for item upload
ls1 = lightspeed_api_jrm.Lightspeed(c)

log_msg('...connected to Lightspeed')


# *************************
# ******* main body start ***********
# *************************

# define variables needed for upload

# variables from GoForm data
d = description  
s = consignment sku
p = price
e = vendor email, name
g = g

# for vendor need to lookup master list to see if email address already linked to vendor profile
# if yes - use vendorID, if no, leave blank and new vendor created
payload = {'load_relations': "Contact"}
df_vendor = ls.get('Vendor', parameters=payload)   # get master list of vendors
# !!! not all vendor profiles have email address
# match to email
vendorID = ###   # match to vendorID


# create a 'list' of {'used','last_name', 'formID'}
# need to add tags after item creation (?)
t = tags
# example code, see function at bottom
# suspect that functiono reads a string = tag1; tag2; tag3
r = tags_add('Item', str(df_to_tag['itemID'][i]), str(df_to_tag['Tags.tag_x'][i] + '; locally;'))


# static variable
prod_cate = category 

# need to add quantity after item creation (?)
q = qty

formatted = {'Item': 
{
      "defaultCost": "0",
      "discountable": "true",
      "tax": "false",
      "itemType": "default",
      "description": d,
      "customSku": s,
      "categoryID": prod_cate,
      "taxClassID": "1",
      "itemMatrixID": "0",
      "defaultVendorID": v,
      "Prices": {
      "ItemPrice": [
        {
          "amount": p,
          "useTypeID": "1",
          "useType": "Default"
        },
        {
          "amount": "p,
          "useTypeID": "2",
          "useType": "MSRP"
        },
        {
          "amount": p,
          "useTypeID": "3",
          "useType": "Online"
        }
      ]}
}
}

# upload item to Lightspeed
item = ls.create("Item", formatted["Item"])

# VERIFY - if item status code is 200 then good


# add quantity to item
item = ls.create("Item", formatted["Item"])

# VERIFY - if item status code is 200 then good


# add tags to item
item = ls.create("Item", formatted["Item"])

# VERIFY - if item status code is 200 then good



# *************************
# ******* main body ended ***********
# *************************



# *************************
# ******* program ended ***********
# *************************
log_msg('program ended')







"""  *************************************************************************************************************
         ******************************      tags_add()  *******************************************************
         *************************************************************************************************************

         This function connects to Lightspeed and adds multiple tags 
"""

def tags_add(ls_type, ID, tags):
    """
    receive ID and tags
    parse tags and format payload
    put tags to item matrix

    ls_type - type of item
    ID -
    tags -


    """
    logging.debug('tags_add called')

    payload = list2xml(newtag, str2list(tags), ls_type)
    logging.info(payload)

    try:
        r = lsr.add_tags(ls_type + "/" + str(ID), payload)
        time.sleep(1)

        try:
            payload = {'load_relations': "[\"TagRelations.Tag\"]"}
            item = ls.get(ls_type + '/' + str(ID), parameters=payload)
            s = str(item[ls_type]['Tags']['tag'])
            logging.info(f'item {ls_type}: {ID} - found tags to be s - {s}')
            if newtag in s:
                logging.info(f'item {ls_type}: {ID} - tagged as {newtag}')
            else:
                logging.info(f'item {ls_type}: {ID} - tag error at try loop')
        except:
            logging.info(f'item {ls_type}: {ID} - tag error after update')
            r = 0

    except:
        logging.info(f'item {ls_type}: {ID} - not tagged.')
        r=0

    return r


def str2list(s):

    if '[' in s:
        s = s.strip(',')
        s = s.replace(', ', '')
        s = s.replace('[', '')
        s = s.replace(']', '')
        s = s.replace('\'\'', '\'')
        s = s[1:-1]
        s = s.split(sep='\'')
    else:
        s = [s]

    try:
        s.remove(search_tag)                                                                                                  # remove the query tag from the list of new tags to add
    except:
        s = s

    print('s: ' + str(s))
    if type(s) == list:
        return s
    else:
        return ['']


def list2xml(newtag, taglist, ls_type):
    print('taglist: ' + str(taglist))
    # taglist = taglist.append([newtag])
    taglist.append(newtag)
    # taglist = taglist + newtag
    print('new taglist: ' + str(taglist))
    prefix = "<" + str(ls_type) + "><Tags>"
    suffix = "</Tags></" +str(ls_type) + ">"
    tags = ''
    for t in taglist:
        print(t)
        tags = tags + '<tag>' + str(t) + '</tag>'
    print('tags: ' + prefix + tags + suffix)

    return prefix + tags + suffix



